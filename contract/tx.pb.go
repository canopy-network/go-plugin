// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: tx.proto

package contract

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction represents a request or action submitted to the network like transfer assets or perform other operations
// within the blockchain system
type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message_type: The type of the transaction like 'send' or 'stake'
	MessageType string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"messageType"` // @gotags: json:"messageType"
	// msg: The actual transaction message payload, which is encapsulated in a generic message format
	Msg *anypb.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// fee: The fee associated with processing the transaction
	Fee           uint64 `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_tx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_tx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_tx_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *Transaction) GetMsg() *anypb.Any {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Transaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

// MessageSend is a standard transfer transaction, taking tokens from the sender and transferring
// them to the recipient
type MessageSend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// from_address: is the sender of the funds
	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"fromAddress"` // @gotags: json:"fromAddress"
	// to_address: is the recipient of the funds
	ToAddress []byte `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"toAddress"` // @gotags: json:"toAddress"
	// amount: is the amount of tokens in micro-denomination (uCNPY)
	Amount        uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSend) Reset() {
	*x = MessageSend{}
	mi := &file_tx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSend) ProtoMessage() {}

func (x *MessageSend) ProtoReflect() protoreflect.Message {
	mi := &file_tx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSend.ProtoReflect.Descriptor instead.
func (*MessageSend) Descriptor() ([]byte, []int) {
	return file_tx_proto_rawDescGZIP(), []int{1}
}

func (x *MessageSend) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *MessageSend) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *MessageSend) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// FeeParams is the parameter space that defines various amounts for transaction fees
type FeeParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// send_fee: is the fee amount (in uCNPY) for Message Send
	SendFee       uint64 `protobuf:"varint,1,opt,name=send_fee,json=sendFee,proto3" json:"sendFee"` // @gotags: json:"sendFee"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeParams) Reset() {
	*x = FeeParams{}
	mi := &file_tx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeParams) ProtoMessage() {}

func (x *FeeParams) ProtoReflect() protoreflect.Message {
	mi := &file_tx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeParams.ProtoReflect.Descriptor instead.
func (*FeeParams) Descriptor() ([]byte, []int) {
	return file_tx_proto_rawDescGZIP(), []int{2}
}

func (x *FeeParams) GetSendFee() uint64 {
	if x != nil {
		return x.SendFee
	}
	return 0
}

// A Signature is a digital signature is a cryptographic "fingerprint" created with a private key,
// allowing others to verify the authenticity and integrity of a message using the corresponding public key
type Signature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public_key: is a cryptographic code shared openly, used to verify digital signatures
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"publicKey"` // @gotags: json:"publicKey"
	// signature: the bytes of the signature output from a private key which may be verified with the message and public
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_tx_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_tx_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_tx_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_tx_proto protoreflect.FileDescriptor

const file_tx_proto_rawDesc = "" +
	"\n" +
	"\btx.proto\x12\x05types\x1a\x19google/protobuf/any.proto\"j\n" +
	"\vTransaction\x12!\n" +
	"\fmessage_type\x18\x01 \x01(\tR\vmessageType\x12&\n" +
	"\x03msg\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x03msg\x12\x10\n" +
	"\x03fee\x18\x06 \x01(\x04R\x03fee\"g\n" +
	"\vMessageSend\x12!\n" +
	"\ffrom_address\x18\x01 \x01(\fR\vfromAddress\x12\x1d\n" +
	"\n" +
	"to_address\x18\x02 \x01(\fR\ttoAddress\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x04R\x06amount\"&\n" +
	"\tFeeParams\x12\x19\n" +
	"\bsend_fee\x18\x01 \x01(\x04R\asendFee\"H\n" +
	"\tSignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x01 \x01(\fR\tpublicKey\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignatureB.Z,github.com/canopy-network/go-plugin/contractb\x06proto3"

var (
	file_tx_proto_rawDescOnce sync.Once
	file_tx_proto_rawDescData []byte
)

func file_tx_proto_rawDescGZIP() []byte {
	file_tx_proto_rawDescOnce.Do(func() {
		file_tx_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tx_proto_rawDesc), len(file_tx_proto_rawDesc)))
	})
	return file_tx_proto_rawDescData
}

var file_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tx_proto_goTypes = []any{
	(*Transaction)(nil), // 0: types.Transaction
	(*MessageSend)(nil), // 1: types.MessageSend
	(*FeeParams)(nil),   // 2: types.FeeParams
	(*Signature)(nil),   // 3: types.Signature
	(*anypb.Any)(nil),   // 4: google.protobuf.Any
}
var file_tx_proto_depIdxs = []int32{
	4, // 0: types.Transaction.msg:type_name -> google.protobuf.Any
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tx_proto_init() }
func file_tx_proto_init() {
	if File_tx_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tx_proto_rawDesc), len(file_tx_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tx_proto_goTypes,
		DependencyIndexes: file_tx_proto_depIdxs,
		MessageInfos:      file_tx_proto_msgTypes,
	}.Build()
	File_tx_proto = out.File
	file_tx_proto_goTypes = nil
	file_tx_proto_depIdxs = nil
}
